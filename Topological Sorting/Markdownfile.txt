# Topological Sort Implementations in Python

## Introduction
Topological sorting is a technique used to order the vertices of a directed graph in such a way that for every directed edge u -> v, vertex u comes before vertex v in the ordering. This ordering is known as a topological ordering.

## Approaches
### Kahn's Algorithm
1. **Initialization**: Initialize a dictionary `in_degree` to store the in-degree of each vertex in the graph. Initialize a queue with vertices having zero in-degree.
2. **BFS-based Approach**: Perform a Breadth-First Search (BFS) traversal starting from vertices with zero in-degree.
3. **Update In-degrees**: Remove the current vertex from the queue and decrease the in-degree of its neighbors by one. If a neighbor's in-degree becomes zero, add it to the queue.
4. **Repeat**: Continue the process until the queue becomes empty.

### BFS (Alternative Approach)
1. **Initialization**: Similar to Kahn's algorithm, initialize a dictionary `in_degree` to store the in-degree of each vertex in the graph and a queue with vertices having zero in-degree.
2. **BFS-based Approach**: Perform a Breadth-First Search (BFS) traversal starting from vertices with zero in-degree.
3. **Update In-degrees**: Similar to Kahn's algorithm, remove the current vertex from the queue and decrease the in-degree of its neighbors by one. If a neighbor's in-degree becomes zero, add it to the queue.
4. **Repeat**: Continue the process until the queue becomes empty.

### DFS (Depth-First Search)
1. **Initialization**: Initialize a set `visited` to keep track of visited vertices and a stack to store the topologically sorted vertices.
2. **DFS-based Approach**: Perform a Depth-First Search (DFS) traversal starting from any unvisited vertex.
3. **Recursion**: Recursively visit each neighbor of the current vertex and mark them as visited. After visiting all neighbors, push the current vertex onto the stack.
4. **Repeat**: Continue the process until all vertices are visited.

## Example Usage
```python
g = Graph()
g.add_edge(1, 2)
g.add_edge(1, 3)
g.add_edge(2, 4)
g.add_edge(3, 4)

print("Kahn's Algorithm:", g.topological_sort_kahn())
print("BFS:", g.topological_sort_bfs())
print("DFS:", g.topological_sort_dfs())
